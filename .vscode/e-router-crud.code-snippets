{
    "express CRUD router typescript": {
        "prefix": "e-router-crud",
        "scope": "typescript",
        "body": [
            "import { Router, Request, Response } from 'express';",
            "",
            "import { BaseRoute } from '../BaseRoute';",
            "/**",
            " * @swagger",
            " *",
            " * definitions:",
            " *   Upsert${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}:",
            " *     type: object",
            " *     properties:",
            " *       name:",
            " *         type: string",
            " *       editionsCompatibility:",
            " *         type: array",
            " *         description: edition compatibility ids",
            " *         items:",
            " *           type: string",
            " *       description:",
            " *         type: string",
            " *       system:",
            " *         type: string",
            " *         description: system id",
            " *       linkedTo:",
            " *         type: string",
            " *         description: system id",
            " *       controls:",
            " *         type: array",
            " *         items:",
            " *           $ref: '#/definitions/CardControl${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}/}'",
            " *       language:",
            " *         type: string",
            " *       createdBy:",
            " *          type: string",
            " *          description: user id.",
            " *   ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}Response:",
            " *     allOf:",
            " *     - $ref: '#/definitions/BaseResponse'",
            " *     - type: object",
            " *     - required:",
            " *       - ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}",
            " *       properties:",
            " *         ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}:",
            " *           type: object",
            " *           $ref: '#/definitions/${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}'",
            " *   Get${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}sResponse:",
            " *     allOf:",
            " *     - $ref: '#/definitions/BaseResponse'",
            " *     - type: object",
            " *     - required:",
            " *       - ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}s",
            " *       properties:",
            " *         ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}s:",
            " *           type: array",
            " *           items:",
            " *             $ref: '#/definitions/${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}'",
            " *   GetAll${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}sResponse:",
            " *     allOf:",
            " *     - $ref: '#/definitions/BaseResponse'",
            " *     - type: object",
            " *     - required:",
            " *       - ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}s",
            " *       properties:",
            " *         ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}s:",
            " *           type: array",
            " *           items:",
            " *             $ref: '#/definitions/${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}'",
            " *   Upsert${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}Request:",
            " *     type: object",
            " *     required:",
            " *     - ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}",
            " *     properties:",
            " *       ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}:",
            " *         type: object",
            " *         $ref: '#/definitions/Upsert${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}'",
            " * tags:",
            " * - name: ${TM_DIRECTORY/^.+\\\\(.*)$/$1/}",
            " */",
            "",
            "export class ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}Router extends BaseRoute {",
            "    /**",
            "     * @swagger",
            "     * /${TM_DIRECTORY/^.+\\\\(.*)$/$1/}/${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}-${2:/lowercase}/}:",
            "     *    put:",
            "     *      operationId: create${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}",
            "     *      tags:",
            "     *        - ${TM_DIRECTORY/^.+\\\\(.*)$/$1/}",
            "     *      description: This should add ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}",
            "     *      produces:",
            "     *        - application/json",
            "     *      consume:",
            "     *        - application/json",
            "     *      parameters:",
            "     *        - in: header",
            "     *          name: authorization",
            "     *          type: string",
            "     *          required: true",
            "     *          description: JWT auth",
            "     *        - in: body",
            "     *          name: ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}",
            "     *          required: true",
            "     *          schema:",
            "     *            type: object",
            "     *            $ref: '#/definitions/Upsert${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}Request'",
            "     *      responses:",
            "     *        200:",
            "     *          description: base response if succeed with success on true",
            "     *          schema:",
            "     *            $ref: '#/definitions/${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}Response'",
            "     *        400:",
            "     *          description: something went wrong with request body",
            "     *          schema:",
            "     *            $ref: '#/definitions/ErrorResponse'",
            "     *",
            "     */",
            "    public addAction(router: Router): void {",
            "        router.put('/${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}-${2:/lowercase}/}', this.guard, (req: Request, res: Response) => {",
            "            const ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/} = req.body.${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/};",
            "",
            "            const new${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}/} = ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}.hydrate(${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/});",
            "            new${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}/}.save((err, ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}: I${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}) => {",
            "                if (err) return this.sendError(res, err, ErrorMessageConstants.WRONG_INPUT);",
            "",
            "                this.sendResponse({ success: true, ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}: new${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}/} }, res);",
            "            });",
            "        });",
            "    }",
            "",
            "    /**",
            "     * @swagger",
            "     * /${TM_DIRECTORY/^.+\\\\(.*)$/$1/}/${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}-${2:/lowercase}/}/{id}:",
            "     *    get:",
            "     *      operationId: get${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}",
            "     *      tags:",
            "     *        - ${TM_DIRECTORY/^.+\\\\(.*)$/$1/}",
            "     *      description: This should return ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/} with specified {id} param,",
            "     *      produces:",
            "     *        - application/json",
            "     *      parameters:",
            "     *        - in: header",
            "     *          name: authorization",
            "     *          type: string",
            "     *          required: true",
            "     *          description: JWT auth",
            "     *        - in: path",
            "     *          name: id",
            "     *          required: true",
            "     *          type: string",
            "     *          description: ID of ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}",
            "     *      responses:",
            "     *        200:",
            "     *          description: base response if succeed with success on true",
            "     *          schema:",
            "     *            $ref: '#/definitions/${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}Response'",
            "     *        400:",
            "     *          description: something went wrong with request body",
            "     *          schema:",
            "     *            $ref: '#/definitions/ErrorResponse'",
            "     */",
            "    public getAction(router: Router): void {",
            "        router.get('/${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}-${2:/lowercase}/}/:id', this.guard, (req: Request, res: Response) => {",
            "            const id = req.params.id;",
            "",
            "            ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}.findById(id).populate(${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}${2:/capitalize}/}PopulatePaths).exec((err, ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}: I${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}) => {",
            "                if (err) return this.sendError(res, err, ErrorMessageConstants.UNKOWN_ERROR);",
            "",
            "                this.sendResponse({ success: true, ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}: ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/} }, res);",
            "            });",
            "        });",
            "    }",
            "",
            "    /**",
            "     * @swagger",
            "     * /${TM_DIRECTORY/^.+\\\\(.*)$/$1/}/${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}-${2:/lowercase}/}:",
            "     *    patch:",
            "     *      operationId: update${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}",
            "     *      tags:",
            "     *        - ${TM_DIRECTORY/^.+\\\\(.*)$/$1/}",
            "     *      description: This should update ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}",
            "     *      produces:",
            "     *        - application/json",
            "     *      consume:",
            "     *        - application/json",
            "     *      parameters:",
            "     *        - in: header",
            "     *          name: authorization",
            "     *          type: string",
            "     *          required: true",
            "     *          description: JWT auth",
            "     *        - in: body",
            "     *          name: ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}",
            "     *          required: true",
            "     *          schema:",
            "     *            type: object",
            "     *            $ref: '#/definitions/Upsert${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}Request'",
            "     *      responses:",
            "     *        200:",
            "     *          description: base response if succeed with success on true",
            "     *          schema:",
            "     *            $ref: '#/definitions/${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}Response'",
            "     *        400:",
            "     *          description: something went wrong with request body",
            "     *          schema:",
            "     *            $ref: '#/definitions/ErrorResponse'",
            "     */",
            "    public updateAction(router: Router): void {",
            "        router.patch('/${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}-${2:/lowercase}/}', this.guard, (req: Request, res: Response) => {",
            "            const patch${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}/} = req.body.${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/};",
            "",
            "            ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}.findById(patch${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}/}._id, (err, ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}: I${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}) => {",
            "                if (err) return this.sendError(err, ErrorMessageConstants.WRONG_INPUT);",
            "",
            "                ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}.update({ _id: patch${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}/}._id }, patch${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}/}, (err, ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}: I${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}) => {",
            "                    if (err) return this.sendError(res, err);",
            "",
            "                    this.sendResponse({ success: true, ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}: ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/} }, res);",
            "                });",
            "            });",
            "        });",
            "    }",
            "",
            "    /**",
            "     * @swagger",
            "     * /${TM_DIRECTORY/^.+\\\\(.*)$/$1/}/${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}-${2:/lowercase}/}/{id}:",
            "     *    delete:",
            "     *      operationId: delete${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}",
            "     *      tags:",
            "     *        - ${TM_DIRECTORY/^.+\\\\(.*)$/$1/}",
            "     *      description: This should delete ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}",
            "     *      produces:",
            "     *        - application/json",
            "     *      parameters:",
            "     *        - in: header",
            "     *          name: authorization",
            "     *          type: string",
            "     *          required: true",
            "     *          description: JWT auth",
            "     *        - in: path",
            "     *          name: id",
            "     *          required: true",
            "     *          type: string",
            "     *          description: ID of ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}",
            "     *      responses:",
            "     *        200:",
            "     *          description: base response if succeed with success on true",
            "     *          schema:",
            "     *            $ref: '#/definitions/BaseResponse'",
            "     *        400:",
            "     *          description: something went wrong with request body",
            "     *          schema:",
            "     *            $ref: '#/definitions/ErrorResponse'",
            "     *        403:",
            "     *          description: user does not have permissions to delete ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}",
            "     *          schema:",
            "     *            $ref: '#/definitions/BaseResponse'",
            "     */",
            "    public deleteAction(router: Router): void {",
            "        router.delete('/${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}-${2:/lowercase}/}/:id', this.guard, (req: Request, res: Response) => {",
            "            const user = req.user;",
            "            const ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}Id = req.params.id;",
            "",
            "            ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}.canDelete(${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}Id, user._id, (err, canDelete) => {",
            "                if (err) return this.sendError(res, err, ErrorMessageConstants.WRONG_INPUT);",
            "",
            "                if (canDelete) {",
            "                    ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/capitalize}${2:/capitalize}/}.deleteOne({ _id: ${TM_FILENAME/([a-z]*)-?([a-z]*)(\\.router)*?(\\..*)/${1:/lowercase}/}Id }, (err) => {",
            "                        if (err) return this.sendError(res, err, ErrorMessageConstants.UNKOWN_ERROR);",
            "",
            "                        this.sendResponse({ success: true }, res);",
            "                    });",
            "                } else {",
            "                    this.sendNotAuthorized(res);",
            "                }",
            "            });",
            "        });",
            "    }",
            "}"
        ],
        "description": "Creates typed router from <foo>-<bar>.router.ts or <foo>.router.ts"
    }
}